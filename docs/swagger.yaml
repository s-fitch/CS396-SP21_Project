openapi: 3.0.1
info:
  title: Community Q's
  description: This API facilitates a question-answer web application, similar to that of Campuswire or Piazza. Unlike those existing solutions, these communities can span any topic, not just academic courses. All questions will be posted anonymously in order to provide a platform to ask questions that users may be otherwise uncomfortable asking. While other users cannot see the author of a particular question or answer, the author of the post is still recorded on the backend and can be referenced
    if a question is reported.
  version: 1.0.0
tags:
- name: account
  description: User account creation and management
- name: community
  description: Manage, search through, and view question communities
- name: question
  description: Creation and querying of questions
- name: answer
  description: Creation and scoring of answers to questions
  
  
paths:
  /account:
    post:
      tags:
      - account
      summary: Create a new account
      operationId: accountCREATE
      requestBody:
        content:
          application/json:
            schema:
              required:
              - email
              - password
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        200:
          $ref: '#/components/responses/Token'
        400:
          description: Invalid contents, such as email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    patch:
      tags:
      - account
      summary: Update account information
      operationId: accountPATCH
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
        required: true
      responses:
        200:
          $ref: '#/components/responses/Token'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
      - accountAuth: []
  /account/login:
    post:
      tags:
      - account
      summary: Log user into account
      operationId: accountLOGIN
      requestBody:
        content:
          application/json:
            schema:
              required:
              - email
              - password
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        200:
          $ref: '#/components/responses/Token'
        400:
          description: Improperly formatted request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        403:
          description: Invalid login credentials
  /account/refresh:
    post:
      tags:
      - account
      summary: Refresh user authorization token
      operationId: accountREFRESH
      requestBody:
        content:
          application/json:
            schema:
              required:
              - refresh_token
              type: object
              properties:
                refresh_token:
                  type: string
        required: true
      responses:
        200:
          $ref: '#/components/responses/Token'
        401:
          description: Refresh token is invalid or missing
          content: {}
  
  /account/feed:
    get:
      tags:
      - account
      summary: Get feed of joined communities
      operationId: accountFEED
      responses:
        200:
          description: Successfully retreived community feed for user
          content:
            application/json:
              schema:
                type: object
                properties:
                  communites:
                    type: array
                    items: 
                      $ref: '#/components/schemas/Community'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
      - accountAuth: []    
      
      
  /c:
    post:
      tags:
      - community
      summary: Create a new community
      operationId: communityCREATE
      requestBody:
        content:
          application/json:
            schema:
              required:
              - name
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                image_url_profile:
                  type: string
                image_url_banner:
                  type: string
        required: true
      responses:
        200:
          description: Community created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        400:
          description: invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        401:
          $ref: '#/components/responses/Unauthorized'
      security:
      - accountAuth: []
  /c/{community_id}:
    get:
      tags:
      - community
      summary: Get information for a community
      operationId: communityGET
      parameters:
      - $ref: '#/components/parameters/community_id'
      responses:
        200:
          description: Successfully retreived community information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        404:
          description: Community with specified id does not exist
          content: {}
      security:
      - accountAuth: []
    patch:
      tags:
      - community
      summary: Update infromation for community
      operationId: communityPATCH
      parameters:
      - $ref: '#/components/parameters/community_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                moderators:
                  type: string
        required: true
      responses:
        200:
          description: Successfully updated community information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        400:
          description: Improperly formatted request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: User associated with authorization token is not a moderator
            for this group and thus cannot make changes
          content: {}
      security:
      - accountAuth: []
  /c/search:
    get:
      tags:
      - community
      summary: Search through the available communities
      operationId: communitySEARCH
      parameters:
      - name: terms
        in: query
        description: Terms to use when searching through the communities
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully queried for communites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
  /c/{community_id}/join:
    post:
      tags:
      - community
      summary: Join a community
      description: Once a user joins a community, this community will show
        up in their personal feed.
      operationId: communityJOIN
      parameters:
      - $ref: '#/components/parameters/community_id'
      responses:
        204:
          description: Successfully joined community
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Community with specified ID does not exist
          content: {}
      security:
      - accountAuth: []
  /c/{community_id}/feed:
    get:
      tags:
      - community
      summary: Get feed of questions for a particular community
      operationId: questionsGET
      parameters:
      - $ref: '#/components/parameters/community_id'
      - name: count
        in: query
        description: Maximum number of questions to return
        schema:
          type: string
          default: "20"
      - name: offset
        in: query
        description: Offset from the start to return questions for
        schema:
          type: string
          default: "0"
      responses:
        200:
          description: Successfully retrieved questions for specified community
          content:
            application/json:
              schema:
                type: object
                properties:
                  num_returned:
                    type: integer
                    description: Number of questions returned with this request
                  num_total:
                    type: integer
                    description: Total number of questions in this community
                  questions:
                    type: array
                    items:
                      type: object
                      properties:
                        author_id:
                          type: string
                        author_name:
                          type: string
                        title:
                          type: string
                        body:
                          type: string
  /c/{community_id}/report:
    post:
      tags:
      - community
      summary: Report a community
      operationId: communityREPORT
      parameters:
      - $ref: '#/components/parameters/community_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
        required: true
      responses:
        200:
          description: Successfully reported community
          content: {}
        400:
          description: Improperly formatted request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Community or question with specified ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      security:
      - accountAuth: []

  /c/{community_id}/q:
    post:
      tags:
      - question
      summary: Post a question to a community
      operationId: questionPOST
      parameters:
      - $ref: '#/components/parameters/community_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - title
              - body
              properties:
                title:
                  type: string
                  description: Short title of the question
                body:
                  type: string
                  description: Full content of the question
      responses:
        200:
          description: Successfully posted question to community
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        400:
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Community with specified ID does not exist
          content: {}
      security:
      - accountAuth: []
  /c/{community_id}/q/{question_id}:
    get:
      tags:
      - question
      summary: Get question information and associated answers
      operationId: questionGET
      parameters:
      - $ref: '#/components/parameters/community_id'
      - $ref: '#/components/parameters/question_id'
      responses:
        200:
          description: Successfully queried information for question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Question with specified id or community with specified id does
            not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /c/{community_id}/q/{question_id}/report:
    post:
      tags:
      - question
      summary: Report a question
      operationId: questionREPORT
      parameters:
      - $ref: '#/components/parameters/community_id'
      - $ref: '#/components/parameters/question_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
        required: true
      responses:
        200:
          description: Report successfully made
          content: {}
        400:
          description: Improperly formatted request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Specified community id or question id does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      security:
      - accountAuth: []
  /c/{community_id}/q/{question_id}/a:
    post:
      tags:
      - answer
      summary: Answer a question
      operationId: answerPOST
      parameters:
      - $ref: '#/components/parameters/community_id'
      - $ref: '#/components/parameters/question_id'
      requestBody:
        content:
          application/json:
            schema:
              required:
              - answer
              type: object
              properties:
                answer:
                  type: string
                  description: Text answer to the question
        required: true
      responses:
        204:
          description: Successfully posted answer to question
          content: {}
        400:
          description: Improperly formatted request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Community or question with specified id do not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      security:
      - accountAuth: []
  /c/{community_id}/q/{question_id}/a/{answer_id}/upvote:
    post:
      tags:
      - answer
      summary: Upvote an answer to a question
      operationId: upvotePOST
      parameters:
      - $ref: '#/components/parameters/community_id'
      - $ref: '#/components/parameters/question_id'
      - $ref: '#/components/parameters/answer_id'
      responses:
        200:
          description: Successfully upvoted answer
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Community, question, or answer with specified ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      security:
      - accountAuth: []
    delete:
      tags:
      - answer
      summary: Remove upvote for an answer to a question
      operationId: upvoteDELETE
      parameters:
      - $ref: '#/components/parameters/community_id'
      - $ref: '#/components/parameters/question_id'
      - $ref: '#/components/parameters/answer_id'
      responses:
        204:
          description: Successfully removed upvote for answer
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Community, question, or answer with specified ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      security:
      - accountAuth: []
  /c/{community_id}/q/{question_id}/a/{answer_id}/downvote:
    post:
      tags:
      - answer
      summary: Downvote an answer to a question
      operationId: downvotePOST
      parameters:
      - $ref: '#/components/parameters/community_id'
      - $ref: '#/components/parameters/question_id'
      - $ref: '#/components/parameters/answer_id'
      responses:
        204:
          description: Successfully downvoted answer
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Community, question, or answer with specified ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      security:
      - accountAuth: []
    delete:
      tags:
      - answer
      summary: Remove downvote for an answer to a question
      operationId: downvoteDELETE
      parameters:
      - $ref: '#/components/parameters/community_id'
      - $ref: '#/components/parameters/question_id'
      - $ref: '#/components/parameters/answer_id'
      responses:
        204:
          description: Successfully removed downvote for answer
          content: {}
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Community, question, or answer with specified ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      security:
      - accountAuth: []
  /c/{community_id}/q/{question_id}/a/{answer_id}/report:
    post:
      tags:
      - answer
      summary: Report an answer to a question
      operationId: answerREPORT
      parameters:
      - $ref: '#/components/parameters/community_id'
      - $ref: '#/components/parameters/question_id'
      - $ref: '#/components/parameters/answer_id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
        required: true
      responses:
        204:
          description: Successfully reported answer
          content: {}
        400:
          description: Improperly formatted request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Community or question with specified ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      security:
      - accountAuth: []
  
 
components:
  parameters:
    community_id:
      name: community_id
      in: path
      description: ID of relevant community
      required: true
      schema:
        type: string
        example: 1b470b5c913a853c06cc40d9
    question_id:
      name: question_id
      in: path
      description: ID of relevant question
      required: true
      schema:
        type: string
        example: 472ee2a1217d5d26a609869c
    answer_id:
      name: answer_id
      in: path
      description: ID of relevant answer
      required: true
      schema:
        type: string
        example: 2082a83d12e3db2543da1832
  responses:
    Unauthorized:
      description: Access token is missing or invalid
    Token:
      description: JWT access tokens to be used for future authentication
      content:
        application/json:
          schema:
            type: object
            required: [access_token, refresh_token]
            properties:
              access_token:
                type: string
                description: JSON Web Token (JWT) used for user authentication
              refresh_token:
                type: string
                description: JSON Web Token (JWT) used for refreshing the user authentication when the access token expires
  schemas:
    Community:
      required:
      - _id
      - moderators
      - description
      - name
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier of the group
          example: 86e87d22cd79c6c605a4d6db
        name:
          type: string
          description: Display name of the group
          example: Evanston Birdwatchers
        description:
          type: string
          description: Description of the group
          example: We cover all questions related to birdwatching in the Evanston area.
        moderators:
          type: array
          description: List of moderators that can make changes to the group information
          items:
            type: string
    Question:
      type: object
      properties:
        _id:
          type: string
          description: ID of question
        community:
          type: string
          description: ID of community the question belongs to
        time:
          type: integer
          description: Epoch time when question was posted
        title:
          type: string
          description: Short title for the question
        body:
          type: string
          description: Full content of the question
        answers:
          type: array
          description: All answers to the question sorted by score
          items:
            $ref: '#/components/schemas/Answer'
    Answer:
      type: object
      properties:
        _id:
          type: string
          description: id of answer
        time:
          type: integer
          description: Epoch time when the answer was posted
        community:
          type: string
          description: ID of community the answer belongs to
        question:
          type: string
          description: ID of question the answer belongs to
        score:
          type: integer
          description: Score of the answer, which is num_upvotes-num_downvotes
        body:
          type: string
          description: Actual content of answer to question
    Search:
      type: object
      properties:
        num_returned:
          type: integer
          description: Number of results returned from the search
        num_total:
          type: integer
          description: Total number of results available from the search
        communities:
          type: array
          description: Communities returned from the search
          items:
            $ref: '#/components/schemas/Community'
    Report:
      required:
      - category
      - detail
      type: object
      properties:
        category:
          type: integer
          description: |
            General cateogry report falls under:
              * `0` - Other
              * `1` - Hateful or abusive
              * `2` - Dangerous or harmful
              * `3` - Spam or misleading
        detail:
          type: string
          description: Specific reasoning from the reporting user about the reported
            item
    GenericError:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: error message describing the exact reasoning for the error
            response
  securitySchemes:
    accountAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JSON Web Token (JWT) used for user authentication
